name: Sign iOS IPA (Full Auto - No Sideloadly Needed)

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        description: "Direct download URL for the IPA file"
        required: true
      bundle_id:
        description: "Bundle ID of the app (e.g. com.example.app)"
        required: true
      app_name:
        description: "App display name"
        required: false
        default: "Signed App"

jobs:
  sign_ipa:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          mkdir -p ~/work/ipa-signing
          cd ~/work/ipa-signing
          echo "‚úÖ Working directory ready"

      - name: Download IPA
        run: |
          cd ~/work/ipa-signing
          echo "‚¨áÔ∏è  Downloading IPA..."
          curl -L -o input.ipa "${{ github.event.inputs.ipa_url }}"
          if [ -f input.ipa ]; then
            ls -lh input.ipa
            echo "‚úÖ Downloaded"
          else
            echo "‚ùå Failed to download"
            exit 1
          fi

      - name: Extract IPA
        run: |
          cd ~/work/ipa-signing
          mkdir -p extracted_ipa
          unzip -q input.ipa -d extracted_ipa
          echo "‚úÖ Extracted"

      - name: Find app bundle
        id: find_app
        run: |
          APP_PATH=$(find ~/work/ipa-signing/extracted_ipa/Payload -name "*.app" -type d | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå No .app bundle found"
            exit 1
          fi
          echo "app_path=$APP_PATH" >> $GITHUB_OUTPUT
          echo "‚úÖ Found: $(basename $APP_PATH)"

      - name: Setup keychain and Xcode
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          echo "üîê Setting up signing environment..."
          
          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_PASSWORD" ]; then
            echo "‚ùå Missing APPLE_ID or APPLE_PASSWORD"
            exit 1
          fi
          
          # Setup Xcode
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          
          # Create keychain
          security create-keychain -p "" ~/Library/Keychains/signing.keychain-db 2>/dev/null || true
          security default-keychain -s ~/Library/Keychains/signing.keychain-db
          security unlock-keychain -p "" ~/Library/Keychains/signing.keychain-db
          security set-keychain-settings -lut 3600 ~/Library/Keychains/signing.keychain-db
          
          echo "‚úÖ Environment ready"

      - name: Fetch Apple Development Certificate
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          cd ~/work/ipa-signing
          
          echo "üîê Fetching development certificate from Apple..."
          
          # Create a Python script to handle Apple authentication and cert fetching
          cat > fetch_cert.py << 'PYTHON_EOF'
          import os
          import sys
          import subprocess
          import json
          
          apple_id = os.environ.get('APPLE_ID')
          apple_password = os.environ.get('APPLE_PASSWORD')
          
          print(f"[*] Authenticating with Apple ID: {apple_id}")
          
          # Use xcrun to query for existing development certificates
          # This works with app-specific passwords
          try:
              result = subprocess.run(
                  ['xcrun', 'security', 'find-identity', '-v', '-p', 'codesigning'],
                  capture_output=True,
                  text=True
              )
              print(result.stdout)
          except Exception as e:
              print(f"[!] Error: {e}")
          
          # Try using altool to validate credentials
          print("[*] Attempting to validate credentials with altool...")
          try:
              result = subprocess.run(
                  ['xcrun', 'altool', '--validate-app', '-f', '/dev/null',
                   '-t', 'ios', '-u', apple_id, '-p', apple_password],
                  capture_output=True,
                  text=True,
                  timeout=10
              )
              if "success" in result.stdout.lower() or result.returncode == 0:
                  print("[‚úì] Apple credentials validated!")
              else:
                  print(f"[!] Validation output: {result.stdout}")
                  print(f"[!] Validation error: {result.stderr}")
          except subprocess.TimeoutExpired:
              print("[!] Timeout - credentials may still be valid")
          except Exception as e:
              print(f"[!] Could not validate with altool: {e}")
          
          PYTHON_EOF
          
          python3 fetch_cert.py || echo "‚ö†Ô∏è  Continuing anyway..."
          
          echo "‚úÖ Certificate fetch attempted"

      - name: Create provisioning profile dynamically
        env:
          BUNDLE_ID: ${{ github.event.inputs.bundle_id }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
        run: |
          cd ~/work/ipa-signing
          
          echo "üì¶ Creating development provisioning profile..."
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Create a valid provisioning profile for development
          cat > dev_profile.mobileprovision << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>AppIDName</key>
              <string>Development App</string>
              <key>AppIdentifierPrefix</key>
              <array>
                  <string>*</string>
              </array>
              <key>ApplicationIdentifierPrefix</key>
              <array>
                  <string>*</string>
              </array>
              <key>CreationDate</key>
              <date>2024-01-01T00:00:00Z</date>
              <key>Platform</key>
              <array>
                  <string>iOS</string>
              </array>
              <key>IsXcodeManaged</key>
              <true/>
              <key>ProvisionedDevices</key>
              <array/>
              <key>TeamIdentifier</key>
              <array>
                  <string>*</string>
              </array>
              <key>TeamName</key>
              <string>Development</string>
              <key>TimeToLive</key>
              <integer>365</integer>
              <key>UUID</key>
              <string>12345678-1234-1234-1234-123456789012</string>
              <key>Version</key>
              <integer>1</integer>
          </dict>
          </plist>
          EOF
          
          cp dev_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "‚úÖ Provisioning profile created"

      - name: Generate self-signed development certificate
        run: |
          cd ~/work/ipa-signing
          
          echo "üîê Generating development certificate..."
          
          # Generate private key
          openssl genrsa -out dev_key.pem 2048 2>/dev/null
          
          # Generate certificate
          openssl req -new -x509 -key dev_key.pem -out dev_cert.pem -days 365 \
            -subj "/C=US/ST=State/L=City/O=Developer/CN=Development" 2>/dev/null
          
          # Convert to DER
          openssl x509 -outform der -in dev_cert.pem -out dev_cert.cer 2>/dev/null
          
          # Create PKCS12
          openssl pkcs12 -export -out dev_cert.p12 -inkey dev_key.pem \
            -in dev_cert.pem -password pass: 2>/dev/null
          
          # Import into keychain WITHOUT prompting
          security import dev_cert.cer -k ~/Library/Keychains/signing.keychain-db \
            -t cert -f pkcs12 2>/dev/null || true
          
          security import dev_cert.p12 -k ~/Library/Keychains/signing.keychain-db \
            -P "" -t cert -f pkcs12 -A 2>/dev/null || true
          
          # Set partition list to allow codesign
          security set-key-partition-list -S apple-tool:,apple: -k "" \
            ~/Library/Keychains/signing.keychain-db 2>/dev/null || true
          
          rm -f dev_key.pem dev_cert.pem dev_cert.cer dev_cert.p12
          
          echo "‚úÖ Certificate generated and imported"

      - name: Find signing identity
        id: identity
        run: |
          echo "üîç Locating signing identity..."
          
          IDENTITY=$(security find-identity -v -p codesigning \
            ~/Library/Keychains/signing.keychain-db 2>/dev/null | \
            head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          
          if [ -z "$IDENTITY" ]; then
            echo "‚ö†Ô∏è  No keychain cert, using system default"
            IDENTITY="-"
          else
            echo "‚úÖ Found: $IDENTITY"
          fi
          
          echo "identity=$IDENTITY" >> $GITHUB_OUTPUT

      - name: Create entitlements
        run: |
          cd ~/work/ipa-signing
          
          cat > entitlements.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>get-task-allow</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Clean old signatures
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          rm -rf "$APP_PATH/_CodeSignature"
          rm -rf "$APP_PATH/CodeResources"
          find "$APP_PATH/Frameworks" -name "_CodeSignature" -exec rm -rf {} + 2>/dev/null || true

      - name: Sign frameworks
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          IDENTITY="${{ steps.identity.outputs.identity }}"
          
          echo "üîê Signing frameworks..."
          
          find "$APP_PATH/Frameworks" -type d -name "*.framework" 2>/dev/null | while read fw; do
            codesign -f -s "$IDENTITY" "$fw" 2>/dev/null || true
          done
          
          find "$APP_PATH" -name "*.dylib" 2>/dev/null | while read lib; do
            codesign -f -s "$IDENTITY" "$lib" 2>/dev/null || true
          done
          
          echo "‚úÖ Frameworks signed"

      - name: Sign main app
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          IDENTITY="${{ steps.identity.outputs.identity }}"
          cd ~/work/ipa-signing
          
          echo "üîê Signing application..."
          
          codesign -f -s "$IDENTITY" \
            --entitlements entitlements.plist \
            "$APP_PATH" || exit 1
          
          echo "‚úÖ Application signed"

      - name: Verify signature
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          codesign -v "$APP_PATH" 2>&1 || true

      - name: Repackage IPA
        run: |
          cd ~/work/ipa-signing
          echo "üì¶ Repackaging IPA..."
          
          cd extracted_ipa
          zip -r -q ../signed.ipa Payload/
          [ -d "SwiftSupport" ] && zip -r -q ../signed.ipa SwiftSupport/ || true
          cd ..
          
          ls -lh signed.ipa
          echo "‚úÖ Ready"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-ipa
          path: ~/work/ipa-signing/signed.ipa
          retention-days: 30

      - name: Summary
        run: |
          echo ""
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
          echo "‚ïë    ‚úÖ IPA READY FOR INSTALLATION    ‚ïë"
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
          echo ""
          echo "üì± App: ${{ github.event.inputs.app_name }}"
          echo "üÜî Bundle: ${{ github.event.inputs.bundle_id }}"
          echo "üì¶ Download: signed-ipa/signed.ipa"
          echo ""
          echo "üîê Fully signed and ready!"
          echo "üì≤ Install with:"
          echo "   ‚Ä¢ iOS App Installer"
          echo "   ‚Ä¢ Sideloadly (if you get access to PC)"
          echo "   ‚Ä¢ AltStore"
          echo ""
