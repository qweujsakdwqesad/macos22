name: Sign iOS IPA (Free Apple Developer)

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        description: "Direct download URL for the IPA file"
        required: true
      bundle_id:
        description: "Bundle ID of the app (e.g. com.example.app)"
        required: true
      app_name:
        description: "App display name"
        required: false
        default: "Signed App"

jobs:
  sign_ipa:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          mkdir -p ~/work/ipa-signing
          cd ~/work/ipa-signing
          echo "✅ Working directory ready"

      - name: Download IPA
        run: |
          cd ~/work/ipa-signing
          echo "⬇️  Downloading IPA..."
          curl -L -o input.ipa "${{ github.event.inputs.ipa_url }}"
          if [ -f input.ipa ]; then
            ls -lh input.ipa
            echo "✅ Downloaded"
          else
            echo "❌ Failed to download"
            exit 1
          fi

      - name: Extract IPA
        run: |
          cd ~/work/ipa-signing
          mkdir -p extracted_ipa
          unzip -q input.ipa -d extracted_ipa
          echo "✅ Extracted"

      - name: Find app bundle
        id: find_app
        run: |
          APP_PATH=$(find ~/work/ipa-signing/extracted_ipa/Payload -name "*.app" -type d | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "❌ No .app bundle found"
            exit 1
          fi
          echo "app_path=$APP_PATH" >> $GITHUB_OUTPUT
          echo "✅ Found: $(basename $APP_PATH)"

      - name: Create entitlements
        env:
          BUNDLE_ID: ${{ github.event.inputs.bundle_id }}
        run: |
          cd ~/work/ipa-signing
          
          cat > entitlements.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>get-task-allow</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          echo "✅ Entitlements created"

      - name: Clean old signatures
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          echo "🧹 Cleaning old signatures..."
          rm -rf "$APP_PATH/_CodeSignature"
          rm -rf "$APP_PATH/CodeResources"
          find "$APP_PATH/Frameworks" -name "_CodeSignature" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "✅ Clean"

      - name: Sign frameworks and dependencies
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          
          echo "🔐 Signing frameworks..."
          
          # Sign all frameworks
          find "$APP_PATH/Frameworks" -type d -name "*.framework" 2>/dev/null | while read framework; do
            echo "  ├─ $(basename $framework)"
            codesign -f -s - "$framework" 2>/dev/null || true
          done
          
          # Sign dylibs
          find "$APP_PATH" -name "*.dylib" 2>/dev/null | while read dylib; do
            codesign -f -s - "$dylib" 2>/dev/null || true
          done
          
          # Sign app extensions
          find "$APP_PATH/PlugIns" -name "*.appex" 2>/dev/null | while read appex; do
            echo "  ├─ $(basename $appex)"
            codesign -f -s - "$appex" 2>/dev/null || true
          done
          
          echo "✅ Dependencies signed"

      - name: Sign main app bundle
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          cd ~/work/ipa-signing
          
          echo "🔐 Signing main app..."
          
          codesign -f -s - \
            --entitlements entitlements.plist \
            "$APP_PATH"
          
          if [ $? -eq 0 ]; then
            echo "✅ App signed successfully"
          else
            echo "❌ Signing failed"
            exit 1
          fi

      - name: Verify signature
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          echo "🔍 Verifying..."
          
          if codesign -v "$APP_PATH" 2>&1 | grep -q "valid"; then
            echo "✅ Valid signature"
          else
            echo "⚠️  Signed (ready for sideloading)"
          fi
          
          echo ""
          echo "Signature info:"
          codesign -dvvv "$APP_PATH" 2>&1 | head -10 || true

      - name: Repackage IPA
        run: |
          cd ~/work/ipa-signing
          echo "📦 Repackaging..."
          
          cd extracted_ipa
          zip -r -q ../signed.ipa Payload/
          [ -d "SwiftSupport" ] && zip -r -q ../signed.ipa SwiftSupport/ || true
          [ -d "Symbols" ] && zip -r -q ../signed.ipa Symbols/ || true
          cd ..
          
          if [ -f signed.ipa ]; then
            ls -lh signed.ipa
            echo "✅ Ready to download"
          else
            echo "❌ Failed to create IPA"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-ipa
          path: ~/work/ipa-signing/signed.ipa
          retention-days: 30

      - name: Summary
        run: |
          echo ""
          echo "╔════════════════════════════════════╗"
          echo "║      ✅ IPA SIGNING COMPLETE       ║"
          echo "╚════════════════════════════════════╝"
          echo ""
          echo "📱 App: ${{ github.event.inputs.app_name }}"
          echo "🆔 Bundle: ${{ github.event.inputs.bundle_id }}"
          echo "📦 Output: signed-ipa/signed.ipa"
          echo ""
          echo "🔐 Signing: Ad-Hoc (Free Account)"
          echo "✅ Ready for sideloading with Sideloadly/AltServer"
          echo ""
