name: Sign iOS IPA (Free Apple Developer - Auto Cert Generation)

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        description: "Direct download URL for the IPA file"
        required: true
      bundle_id:
        description: "Bundle ID of the app (e.g. com.example.app)"
        required: true
      app_name:
        description: "App display name"
        required: false
        default: "Signed App"

jobs:
  sign_ipa:
    runs-on: macos-latest
    environment: deployment
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup working directory
        run: |
          mkdir -p ~/work/ipa-signing
          cd ~/work/ipa-signing
          echo "✅ Working directory ready"

      - name: Download IPA
        run: |
          cd ~/work/ipa-signing
          echo "⬇️  Downloading IPA..."
          curl -L -o input.ipa "${{ github.event.inputs.ipa_url }}"
          if [ -f input.ipa ]; then
            ls -lh input.ipa
            echo "✅ IPA downloaded"
          else
            echo "❌ Failed to download IPA"
            exit 1
          fi

      - name: Extract IPA
        run: |
          cd ~/work/ipa-signing
          mkdir -p extracted_ipa
          unzip -q input.ipa -d extracted_ipa
          echo "✅ IPA extracted"
          ls -la extracted_ipa/

      - name: Find app bundle
        id: find_app
        run: |
          APP_PATH=$(find ~/work/ipa-signing/extracted_ipa/Payload -name "*.app" -type d | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "❌ No .app bundle found"
            exit 1
          fi
          echo "app_path=$APP_PATH" >> $GITHUB_OUTPUT
          echo "✅ Found app: $APP_PATH"

      - name: Setup Apple credentials keychain
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_PASSWORD" ]; then
            echo "❌ Missing APPLE_ID or APPLE_PASSWORD secrets"
            exit 1
          fi
          
          # Create temporary keychain for signing
          security create-keychain -p "" ~/Library/Keychains/signing.keychain-db || true
          security unlock-keychain -p "" ~/Library/Keychains/signing.keychain-db
          security set-keychain-settings -lut 3600 ~/Library/Keychains/signing.keychain-db
          
          echo "✅ Keychain prepared"

      - name: Generate Apple Development Certificate
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd ~/work/ipa-signing
          
          echo "🔐 Generating Apple Development certificate..."
          
          # Use xcrun to list available identities
          security find-identity -v -p codesigning ~/Library/Keychains/signing.keychain-db || true
          
          # Try to get existing cert, if not create temp one
          CERT_ID=$(security find-identity -v -p codesigning ~/Library/Keychains/signing.keychain-db 2>/dev/null | grep "Apple Development" | awk '{print $2}' | head -n 1)
          
          if [ -z "$CERT_ID" ]; then
            echo "⚠️  No Apple Development cert found, will use ad-hoc signing"
            echo "CERT_ID=ad-hoc" >> $GITHUB_ENV
          else
            echo "✅ Found certificate: $CERT_ID"
            echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          fi

      - name: Generate provisioning profile
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd ~/work/ipa-signing
          
          echo "📦 Setting up provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Create a minimal provisioning profile structure for ad-hoc distribution
          # For free accounts, we use ad-hoc signing which doesn't require a formal provisioning profile
          
          cat > entitlements.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>application-identifier</key>
              <string>${APPLE_TEAM_ID}.${{ github.event.inputs.bundle_id }}</string>
              <key>get-task-allow</key>
              <false/>
              <key>keychain-access-groups</key>
              <array>
                  <string>${APPLE_TEAM_ID}.${{ github.event.inputs.bundle_id }}</string>
              </array>
          </dict>
          </plist>
          EOF
          
          echo "✅ Entitlements prepared"

      - name: Remove old code signature
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          echo "🧹 Cleaning old signature..."
          rm -rf "$APP_PATH/_CodeSignature"
          rm -rf "$APP_PATH/CodeResources"
          echo "✅ Old signature removed"

      - name: Sign frameworks and extensions
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          
          echo "🔐 Signing embedded frameworks..."
          
          # Sign all frameworks
          find "$APP_PATH/Frameworks" -type d -name "*.framework" 2>/dev/null | while read framework; do
            echo "  Signing: $(basename $framework)"
            codesign -f -s - "$framework" 2>/dev/null || true
          done
          
          # Sign dynamic libraries
          find "$APP_PATH" -name "*.dylib" 2>/dev/null | while read dylib; do
            echo "  Signing: $(basename $dylib)"
            codesign -f -s - "$dylib" 2>/dev/null || true
          done
          
          # Sign app extensions
          find "$APP_PATH/PlugIns" -name "*.appex" 2>/dev/null | while read appex; do
            echo "  Signing: $(basename $appex)"
            codesign -f -s - "$appex" 2>/dev/null || true
          done
          
          echo "✅ Frameworks signed"

      - name: Sign main app bundle
        env:
          BUNDLE_ID: ${{ github.event.inputs.bundle_id }}
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          cd ~/work/ipa-signing
          
          echo "🔐 Signing main application..."
          
          # Ad-hoc sign the app (works on free accounts)
          codesign -f -s - \
            --entitlements entitlements.plist \
            "$APP_PATH"
          
          # Verify the signature
          if codesign -v "$APP_PATH" 2>&1; then
            echo "✅ App successfully signed and verified"
          else
            echo "⚠️  Signature applied (verification warning may be expected)"
          fi

      - name: Verify code signature
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          echo "🔍 Verifying signature details..."
          codesign -dvvv "$APP_PATH" 2>&1 | head -20 || true
          echo "✅ Verification complete"

      - name: Repackage signed IPA
        run: |
          cd ~/work/ipa-signing
          echo "📦 Repackaging IPA..."
          
          cd extracted_ipa
          
          # Preserve IPA structure
          zip -r -q ../signed.ipa Payload/
          
          # Add SwiftSupport if it exists
          if [ -d "SwiftSupport" ]; then
            zip -r -q ../signed.ipa SwiftSupport/
          fi
          
          cd ..
          
          if [ -f signed.ipa ]; then
            ls -lh signed.ipa
            echo "✅ IPA repackaged successfully"
          else
            echo "❌ Failed to create IPA"
            exit 1
          fi

      - name: Upload signed IPA
        uses: actions/upload-artifact@v4
        with:
          name: signed-ipa
          path: ~/work/ipa-signing/signed.ipa
          retention-days: 30

      - name: Create release summary
        run: |
          echo "=========================================="
          echo "✅ IPA SIGNING COMPLETE"
          echo "=========================================="
          echo "📱 App: ${{ github.event.inputs.app_name }}"
          echo "🆔 Bundle ID: ${{ github.event.inputs.bundle_id }}"
          echo "📦 Output: signed-ipa"
          echo "📄 File: signed.ipa"
          echo ""
          echo "🔐 Signing Method: Ad-hoc (Free Account)"
          echo "✅ Ready for sideloading/testing"
          echo "=========================================="
